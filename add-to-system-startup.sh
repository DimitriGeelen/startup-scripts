#!/bin/bash

# =================================================================
# System Startup Manager - A utility for managing system startup commands
# =================================================================
#
# Description:
#   This script helps you easily add commands to your system's startup 
#   (runs at boot before any user login). It supports:
#   - systemd service creation (most modern Linux distributions)
#   - crontab @reboot entries (works on most Unix-like systems)
#   - rc.local additions (legacy systems)
#
# Usage:
#   1. Run this script with sudo: sudo ./add-to-system-startup.sh
#   2. Follow the prompts to specify your command and options
#
# Author: Generated by Claude
# Version: 1.0
#
# =================================================================

# Colors for better visual feedback
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
RESET='\033[0m'

# Check if running as root
if [ "$(id -u)" -ne 0 ]; then
    echo -e "${RED}Error: This script must be run as root (use sudo)${RESET}"
    exit 1
fi

# Get script location
SCRIPT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"

# Detect system type
detect_system_type() {
    if command -v systemctl &> /dev/null; then
        echo "systemd"
    elif [ -f /etc/rc.local ]; then
        echo "rclocal"
    else
        echo "crontab"
    fi
}

SYSTEM_TYPE=$(detect_system_type)

# Print welcome message
echo -e "${GREEN}System Startup Command Manager${RESET}"
echo "Script location: $SCRIPT_PATH"
echo "Detected system type: $SYSTEM_TYPE"
echo ""

# Ask for a name/description for the startup task
echo ""
read -p "Enter a name for this startup task (no spaces, e.g. 'mysql_server'): " TASK_NAME

# Validate task name
if [[ ! "$TASK_NAME" =~ ^[a-zA-Z0-9_-]+$ ]]; then
    echo -e "${RED}Error: Task name must contain only letters, numbers, underscores, and hyphens${RESET}"
    exit 1
fi

# Ask for an optional description
echo ""
read -p "Enter a description for this task (optional): " DESCRIPTION

# Ask for the command to add
echo ""
read -p "Enter the command to run at system startup: " COMMAND

if [ -z "$COMMAND" ]; then
    echo -e "${RED}Error: No command entered. Exiting.${RESET}"
    exit 1
fi

# Ask for the working directory
echo ""
read -p "Enter the working directory for the command (or press Enter for default): " WORKING_DIR

# Ask for user to run as
echo ""
echo -e "${BLUE}Run command as:${RESET}"
echo "1. root (system user)"
echo "2. Specify a different user"
read -p "Enter your choice (1/2): " USER_CHOICE

if [ "$USER_CHOICE" = "2" ]; then
    read -p "Enter username: " RUN_USER
    # Check if user exists
    if ! id "$RUN_USER" &>/dev/null; then
        echo -e "${RED}Warning: User '$RUN_USER' does not exist.${RESET}"
        read -p "Continue anyway? (y/n): " CONTINUE
        if [ "$CONTINUE" != "y" ]; then
            echo "Exiting."
            exit 1
        fi
    fi
else
    RUN_USER="root"
fi

# Create the systemd service file
create_systemd_service() {
    local service_file="/etc/systemd/system/${TASK_NAME}.service"
    
    echo "[Unit]" > "$service_file"
    echo "Description=${DESCRIPTION:-$TASK_NAME}" >> "$service_file"
    echo "After=network.target" >> "$service_file"
    echo "" >> "$service_file"
    echo "[Service]" >> "$service_file"
    echo "Type=simple" >> "$service_file"
    echo "User=$RUN_USER" >> "$service_file"
    
    if [ -n "$WORKING_DIR" ]; then
        echo "WorkingDirectory=$WORKING_DIR" >> "$service_file"
    fi
    
    echo "ExecStart=$COMMAND" >> "$service_file"
    echo "Restart=on-failure" >> "$service_file"
    echo "" >> "$service_file"
    echo "[Install]" >> "$service_file"
    echo "WantedBy=multi-user.target" >> "$service_file"
    
    chmod 644 "$service_file"
    
    systemctl daemon-reload
    systemctl enable "${TASK_NAME}.service"
    
    echo -e "${GREEN}Systemd service created and enabled: ${TASK_NAME}.service${RESET}"
    echo "View service status with: systemctl status ${TASK_NAME}.service"
}

# Add command to /etc/rc.local
add_to_rclocal() {
    # Check if /etc/rc.local exists and is executable
    if [ ! -f /etc/rc.local ]; then
        echo "#!/bin/bash" > /etc/rc.local
        echo "exit 0" >> /etc/rc.local
        chmod +x /etc/rc.local
    fi
    
    # Backup rc.local
    cp /etc/rc.local /etc/rc.local.bak
    
    # Add command before the exit line
    if [ -n "$WORKING_DIR" ]; then
        sed -i "s|exit 0|# $DESCRIPTION\\ncd $WORKING_DIR && $COMMAND\\n\\nexit 0|" /etc/rc.local
    else
        sed -i "s|exit 0|# $DESCRIPTION\\n$COMMAND\\n\\nexit 0|" /etc/rc.local
    fi
    
    echo -e "${GREEN}Command added to /etc/rc.local${RESET}"
    echo "A backup was created at /etc/rc.local.bak"
}

# Add command to root's crontab
add_to_crontab() {
    # Create a temporary file
    TEMP_CRON=$(mktemp)
    
    # Export existing crontab
    crontab -u "$RUN_USER" -l > "$TEMP_CRON" 2>/dev/null || echo "" > "$TEMP_CRON"
    
    # Add the new command
    echo "# $DESCRIPTION" >> "$TEMP_CRON"
    if [ -n "$WORKING_DIR" ]; then
        echo "@reboot cd $WORKING_DIR && $COMMAND" >> "$TEMP_CRON"
    else
        echo "@reboot $COMMAND" >> "$TEMP_CRON"
    fi
    
    # Import the modified crontab
    crontab -u "$RUN_USER" "$TEMP_CRON"
    rm "$TEMP_CRON"
    
    echo -e "${GREEN}Command added to $RUN_USER's crontab with @reboot${RESET}"
    echo "View with: crontab -u $RUN_USER -l"
}

# Confirm with the user
echo ""
echo -e "${GREEN}Summary:${RESET}"
echo "Task name: $TASK_NAME"
echo "Description: ${DESCRIPTION:-None}"
echo "Command: $COMMAND"
echo "Working directory: ${WORKING_DIR:-Default}"
echo "Run as user: $RUN_USER"
echo "System type: $SYSTEM_TYPE"

echo ""
read -p "Add this command to system startup? (y/n): " CONFIRM

if [ "$CONFIRM" = "y" ]; then
    case "$SYSTEM_TYPE" in
        systemd)
            create_systemd_service
            ;;
        rclocal)
            add_to_rclocal
            ;;
        crontab)
            add_to_crontab
            ;;
    esac
    
    echo ""
    echo -e "${GREEN}Success!${RESET} Command will run at next system boot."
else
    echo "Operation cancelled. No changes were made."
fi
